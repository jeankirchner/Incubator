options{  ERROR_REPORTING = true;  STATIC = false;  IGNORE_CASE = true;}PARSER_BEGIN(FBC)package flowbuilder.code.parser;import java.io.Reader;import java.io.StringReader;import java.util.ArrayList;import java.util.List;import flowbuilder.code.structure.Begin;import flowbuilder.code.structure.Call;import flowbuilder.code.structure.Code; import flowbuilder.code.structure.Conditional;import flowbuilder.code.structure.Else;import flowbuilder.code.structure.End;import flowbuilder.code.structure.FBCNode;import flowbuilder.code.structure.Fork;import flowbuilder.code.structure.If;import flowbuilder.code.structure.Loop;import flowbuilder.code.structure.Note;import flowbuilder.code.structure.Process;import flowbuilder.code.structure.Step;import flowbuilder.code.structure.Task;public class FBC{  public static FBCNode parseCode(Reader in) throws ParseException  {    return new FBC(in).parseCode();  }  public static FBCNode parseCode(CharSequence code) throws ParseException  {    return parseCode(new StringReader(code.toString()));  }}  PARSER_END(FBC)SKIP :{  " "| "\t"| "\n"| "\r\n"| "\r"}< IN_CONDITION >SKIP :{  " "| "\t"| "\n"| "\r\n"| "\r"}< IN_NOTE >SKIP :{  " "| "\t"| "\n"| "\r\n"| "\r"}SKIP :{  < LINE_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >}SKIP :{  < BLOCK_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < BEGIN : "begin" >| < END : "end" >| < ELSE : "else" >| < FORK : "fork" >| < TASK : "task" >| < STEP :    (~[ "\n", "\r" ])* ";"    (      "\n"    | "\r"    | "\r\n"    ) >  //O - open, C - close| < O_PARENTHESIS : "(" >| < C_PARENTHESIS : ")" >| < O_BRACE : "{" >| < C_BRACE : "}" >}TOKEN :{  < PROCESS : "process" > : IN_PROCESS}< IN_PROCESS >TOKEN :{  < PROCESS_NAME :    (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >  : DEFAULT}TOKEN :{  < IF : "if" > : IN_CONDITION| < LOOP : "loop" > : IN_CONDITION}< IN_CONDITION >TOKEN :{  < CONDITION : < O_PARENTHESIS > (~[ ")" ])+ < C_PARENTHESIS > > : DEFAULT}TOKEN :{  < NOTE : "@note" > : IN_NOTE}< IN_NOTE >TOKEN :{  < NOTE_TEXT : < O_BRACE > (~[ "}" ])+ < C_BRACE > > : DEFAULT}FBCNode parseCode() :{  FBCNode root;}{  root = process() < EOF >  {    return root;  }}Process process() :{  List < Note > notes;  Process process;  String name;  Begin begin;  List < Code > codeList;  End end;}{  < PROCESS > < PROCESS_NAME >  {    name = getToken(0).image.trim();  }  notes = notes() begin = begin() codeList = codes() end = end()  {    process = new Process(name, begin, end);    process.addCodeNodes(codeList);    process.addNotes(notes);    return process;  }}Begin begin() :{}{  < BEGIN >  {    return new Begin();  }}End end() :{}{  < END >  {    return new End();  }}List < Code > codes() :{  List < Code > codeList = new ArrayList < Code > ();  Code currentCode;}{  (    currentCode = code()    {      codeList.add(currentCode);    }  )*  {    return codeList;  }}Code code() :{  List < Note > notes;  Code c = null;  String s;}{  notes = notes()  (    c = conditional()  | c = fork()  | c = loop()  | s = step()    {      c = Phrase.parsePhrase(s);    }  )  {    c.addNotes(notes);    return c;  }}List < Note > notes() :{  List < Note > notes = new ArrayList < Note > ();  Note currentNote;}{  (    currentNote = note()    {      notes.add(currentNote);    }  )*  {    return notes;  }}Note note() :{  String text;}{  < NOTE > < NOTE_TEXT >  {    text = getToken(0).image;  }  {    text = text.substring(1, text.length() - 1).trim();    return new Note(text);  }}Conditional conditional() :{  If _if;  Else _else;}{  _if = _if() _else = _else()  {    return new Conditional(_if, _else);  }}If _if() :{  If o;  String condition;  List < Code > codeList;}{  < IF > < CONDITION >  {    condition = getToken(0).image;    condition = condition.substring(1, condition.length() - 1).trim();    o = new If(condition);  }  < O_BRACE > codeList = codes() < C_BRACE >  {    o.addCodeNodes(codeList);    return o;  }}Else _else() :{  Else _else = null;  List < Code > codeList = null;}{  (    < ELSE > < O_BRACE > codeList = codes() < C_BRACE >    {      _else = new Else();    }  )?  {    if (codeList != null)    {      _else.addCodeNodes(codeList);    }    return _else;  }}Fork fork() :{  Fork f = null;  List < Code > tasks = new ArrayList < Code > ();  Task t = null;}{  < FORK > < O_BRACE >  {    f = new Fork();  }  (    t = task()    {      tasks.add(t);    }  )+  < C_BRACE >  {    f.addCodeNodes(tasks);    return f;  }}Task task() :{  List < Code > codes = new ArrayList < Code > ();  List < Note > notes;  Code c;}{  notes = notes() < TASK >  (    LOOKAHEAD(< TASK >  | < C_BRACE >)    ""  | c = code()    {      codes.add(c);    }  )*  {    Task t = new Task();    t.addCodeNodes(codes);    t.addNotes(notes);    return t;  }}Loop loop() :{  Loop o;  String condition;  List < Code > codeList;}{  < LOOP > < CONDITION >  {    condition = getToken(0).image;    condition = condition.substring(1, condition.length() - 1).trim();    o = new Loop(condition);  }  < O_BRACE > codeList = codes() < C_BRACE >  {    o.addCodeNodes(codeList);    return o;  }}String step() :{}{  < STEP >  {    return getToken(0).image.trim();  }}