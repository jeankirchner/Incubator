[{"/Users/jean/prj/flex/user-payments/tools/debit/src/index.ts":"1","/Users/jean/prj/me/incubator/courses/functional-architecture-brian-lonsdorf/exercises/src/index.ts":"2","/Users/jean/prj/me/incubator/courses/functional-architecture-brian-lonsdorf/exercises/src/ex1.ts":"3"},{"size":3815,"mtime":1623077481098,"results":"4","hashOfConfig":"5"},{"size":358,"mtime":1623116001103,"results":"6","hashOfConfig":"7"},{"size":327,"mtime":1623115792977,"results":"8","hashOfConfig":"7"},{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"1gt1nxl",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1e94d7l",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/Users/jean/prj/flex/user-payments/tools/debit/src/index.ts",["17"],"import { promises as fs } from \"fs\";\nimport Stripe from \"stripe\";\nimport serverlessMysql from \"serverless-mysql\";\nimport { options as yargsOptions } from \"yargs\";\n\nimport * as idempotent from \"@flexapp/idempotent\";\nimport { Result } from \"@flexapp/result\";\nimport {\n  Dispatcher,\n  EntityID,\n  FlexEvent,\n  PublishedEvent,\n  Publisher,\n  Version,\n} from \"@flexapp/events-core\";\nimport { log, configure } from \"@flexapp/logger\";\nimport { DynamoEventStore } from \"@flexapp/events-store-dynamo\";\nimport { StripeCharge } from \"@flexapp/user-payment-commands\";\nimport { MySQLStore } from \"@flexapp/mysql-store\";\nimport { UserPayment } from \"@flexapp/user-payment-types\";\n\nconfigure({ level: \"debug\" });\n\nconst read = async (file: string): Promise<UserPayment> => {\n  const buffer = await fs.readFile(file);\n  return JSON.parse(buffer.toString(\"utf8\"));\n};\n\nconst publisher =\n  (publish: Publisher): Dispatcher.Publisher =>\n  async (\n    entity: EntityID,\n    event: FlexEvent\n  ): Promise<Result<PublishedEvent>> => {\n    const pevent = await publish(entity, event, {});\n\n    if (pevent === \"version-conflict\") {\n      return Result.failure(\"Version conflict\");\n    }\n\n    return Result.success(pevent);\n  };\n\nexport async function main() {\n  const logger = () => log.with({ origin: \"tools-debit\" });\n\n  const { argv } = yargsOptions({\n    dryRun: {\n      alias: \"dry-run\",\n      type: \"boolean\",\n      default: true,\n    },\n    apiKey: {\n      alias: \"api-key\",\n      string: true,\n      demandOption: true,\n    },\n    eventsTable: {\n      alias: \"events-table\",\n      string: true,\n      demandOption: true,\n    },\n    dbHost: {\n      alias: \"database-host\",\n      string: true,\n      demandOption: true,\n    },\n    dbName: {\n      alias: \"database-name\",\n      string: true,\n      demandOption: true,\n    },\n    dbUsername: {\n      alias: \"database-username\",\n      string: true,\n      demandOption: true,\n    },\n    dbPassword: {\n      alias: \"db-password\",\n      string: true,\n      demandOption: true,\n    },\n    scheduledCharge: {\n      alias: \"scheduled-charge\",\n      string: true,\n      demandOption: true,\n    },\n    customer: {\n      alias: \"customer\",\n      string: true,\n      demandOption: true,\n    },\n    state: {\n      alias: \"state\",\n      string: true,\n      demandOption: true,\n    },\n  });\n\n  const {\n    dryRun,\n    apiKey,\n    eventsTable,\n    dbHost,\n    dbName,\n    dbUsername,\n    dbPassword,\n    customer,\n    scheduledCharge,\n    state: _state,\n  } = argv;\n\n  const { publish } = DynamoEventStore.create(eventsTable);\n  const mysql = serverlessMysql({\n    config: {\n      host: dbHost,\n      database: dbName,\n      user: dbUsername,\n      password: dbPassword,\n    },\n  });\n  const stripe = new Stripe(apiKey, { apiVersion: \"2020-08-27\" });\n\n  const config = {\n    logger,\n    stripe,\n    store: () => MySQLStore.create({ logger, mysql: () => mysql }),\n    idempotentStore: () => idempotent.DynamoStore.create(eventsTable),\n  };\n\n  const command: StripeCharge = {\n    type: StripeCharge.command,\n    target: { id: customer, type: \"customer\" },\n    payload: {\n      scheduledChargeId: `prisma:${scheduledCharge}`,\n    },\n  };\n\n  const print = async (\n    state: UserPayment,\n    version: Version,\n    _command: StripeCharge,\n    _publisher: Dispatcher.Publisher,\n    _options: Dispatcher.ExecuteOptions = {}\n  ) => {\n    console.log({\n      state,\n      version,\n      message: \"DRY RUN\",\n    });\n    return Result.success(true);\n  };\n\n  const state = await read(_state);\n\n  const process = dryRun ? print : StripeCharge.handler(config);\n\n  const result = await process(\n    state,\n    \"unknown\",\n    command,\n    publisher(publish),\n    {}\n  );\n\n  result.on(\n    () => console.log({ command, message: \"successfully processed command\" }),\n    (e) => {\n      console.log({ e });\n    }\n  );\n}\n","/Users/jean/prj/me/incubator/courses/functional-architecture-brian-lonsdorf/exercises/src/index.ts",["18"],"/Users/jean/prj/me/incubator/courses/functional-architecture-brian-lonsdorf/exercises/src/ex1.ts",["19","20"],"//Semigroup assotiativity\n//Monoid = Semigroup + Identity\n\ntype Semigroup<T> = (x: T) => {\n  x: T;\n  concat: (other: T) => Semigroup<T>;\n};\n\ntype Monoid<T> = Semigroup<T> & {\n  empty: () => T;\n};\n\nconst Sum = (x: number) => ({\n  x,\n  concat: (other: number) => Sum(x + other),\n});\n\ntype X = typeof Sum;\nconsole.log(typeof Sum);",{"ruleId":"21","severity":1,"message":"22","line":44,"column":8,"nodeType":"23","messageId":"24","endLine":44,"endColumn":29},{"ruleId":"21","severity":1,"message":"22","line":5,"column":8,"nodeType":"23","messageId":"24","endLine":5,"endColumn":29},{"ruleId":"25","severity":1,"message":"26","line":9,"column":6,"nodeType":"27","messageId":"28","endLine":9,"endColumn":12},{"ruleId":"25","severity":1,"message":"29","line":18,"column":6,"nodeType":"27","messageId":"28","endLine":18,"endColumn":7},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-unused-vars","'Monoid' is defined but never used.","Identifier","unusedVar","'X' is defined but never used."]